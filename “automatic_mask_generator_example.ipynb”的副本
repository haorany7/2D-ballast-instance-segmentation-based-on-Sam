{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"5fa21d44"},"outputs":[],"source":["# Copyright (c) Meta Platforms, Inc. and affiliates."],"id":"5fa21d44"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1784,"status":"ok","timestamp":1685920967951,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"uMePzSxlKqGi","outputId":"cbac2af4-60d0-4d67-d471-3fe47a3534f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"id":"uMePzSxlKqGi"},{"cell_type":"markdown","metadata":{"id":"b7c0041e"},"source":["# Automatically generating object masks with SAM"],"id":"b7c0041e"},{"cell_type":"markdown","metadata":{"id":"289bb0b4"},"source":["Since SAM can efficiently process prompts, masks for the entire image can be generated by sampling a large number of prompts over an image. This method was used to generate the dataset SA-1B. \n","\n","The class `SamAutomaticMaskGenerator` implements this capability. It works by sampling single-point input prompts in a grid over the image, from each of which SAM can predict multiple masks. Then, masks are filtered for quality and deduplicated using non-maximal suppression. Additional options allow for further improvement of mask quality and quantity, such as running prediction on multiple crops of the image or postprocessing masks to remove small disconnected regions and holes."],"id":"289bb0b4"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":41},"executionInfo":{"elapsed":323,"status":"ok","timestamp":1685920979331,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"072e25b8","outputId":"ab2ed38c-e259-48fd-e22c-c8e9b25a0c53"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","<a target=\"_blank\" href=\"https://colab.research.google.com/github/facebookresearch/segment-anything/blob/main/notebooks/automatic_mask_generator_example.ipynb\">\n","  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n","</a>\n"]},"metadata":{}}],"source":["from IPython.display import display, HTML\n","display(HTML(\n","\"\"\"\n","<a target=\"_blank\" href=\"https://colab.research.google.com/github/facebookresearch/segment-anything/blob/main/notebooks/automatic_mask_generator_example.ipynb\">\n","  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n","</a>\n","\"\"\"\n","))"],"id":"072e25b8"},{"cell_type":"markdown","metadata":{"id":"c0b71431"},"source":["## Environment Set-up"],"id":"c0b71431"},{"cell_type":"markdown","metadata":{"id":"47e5a78f"},"source":["If running locally using jupyter, first install `segment_anything` in your environment using the [installation instructions](https://github.com/facebookresearch/segment-anything#installation) in the repository. If running from Google Colab, set `using_colab=True` below and run the cell. In Colab, be sure to select 'GPU' under 'Edit'->'Notebook Settings'->'Hardware accelerator'."],"id":"47e5a78f"},{"cell_type":"code","execution_count":null,"metadata":{"id":"4fe300fb"},"outputs":[],"source":["using_colab = True"],"id":"4fe300fb"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28536,"status":"ok","timestamp":1685921012865,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"0685a2f5","outputId":"79d6267a-f748-4433-ebcd-5349eafed531"},"outputs":[{"output_type":"stream","name":"stdout","text":["PyTorch version: 2.0.1+cu118\n","Torchvision version: 0.15.2+cu118\n","CUDA is available: True\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.7.0.72)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.22.4)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.0.7)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.39.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (23.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (8.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting git+https://github.com/facebookresearch/segment-anything.git\n","  Cloning https://github.com/facebookresearch/segment-anything.git to /tmp/pip-req-build-rwqz01np\n","  Running command git clone --filter=blob:none --quiet https://github.com/facebookresearch/segment-anything.git /tmp/pip-req-build-rwqz01np\n","  Resolved https://github.com/facebookresearch/segment-anything.git to commit 6fdee8f2727f4506cfbbe553e23b895e27956588\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","mkdir: cannot create directory ‘images’: File exists\n","--2023-06-04 23:23:14--  https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/images/dog.jpg\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.108.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 99846 (98K) [image/jpeg]\n","Saving to: ‘images/dog.jpg.1’\n","\n","dog.jpg.1           100%[===================>]  97.51K  --.-KB/s    in 0.02s   \n","\n","2023-06-04 23:23:15 (5.56 MB/s) - ‘images/dog.jpg.1’ saved [99846/99846]\n","\n","--2023-06-04 23:23:15--  https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth\n","Resolving dl.fbaipublicfiles.com (dl.fbaipublicfiles.com)... 13.35.7.50, 13.35.7.38, 13.35.7.82, ...\n","Connecting to dl.fbaipublicfiles.com (dl.fbaipublicfiles.com)|13.35.7.50|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2564550879 (2.4G) [binary/octet-stream]\n","Saving to: ‘sam_vit_h_4b8939.pth.1’\n","\n","sam_vit_h_4b8939.pt 100%[===================>]   2.39G   153MB/s    in 17s     \n","\n","2023-06-04 23:23:32 (147 MB/s) - ‘sam_vit_h_4b8939.pth.1’ saved [2564550879/2564550879]\n","\n"]}],"source":["if using_colab:\n","    import torch\n","    import torchvision\n","    print(\"PyTorch version:\", torch.__version__)\n","    print(\"Torchvision version:\", torchvision.__version__)\n","    print(\"CUDA is available:\", torch.cuda.is_available())\n","    import sys\n","    !{sys.executable} -m pip install opencv-python matplotlib\n","    !{sys.executable} -m pip install 'git+https://github.com/facebookresearch/segment-anything.git'\n","    \n","    !mkdir images\n","    !wget -P images https://raw.githubusercontent.com/facebookresearch/segment-anything/main/notebooks/images/dog.jpg\n","        \n","    !wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth"],"id":"0685a2f5"},{"cell_type":"markdown","metadata":{"id":"fd2bc687"},"source":["## Set-up"],"id":"fd2bc687"},{"cell_type":"code","execution_count":null,"metadata":{"id":"560725a2"},"outputs":[],"source":["import numpy as np\n","import torch\n","import matplotlib.pyplot as plt\n","import cv2"],"id":"560725a2"},{"cell_type":"code","execution_count":null,"metadata":{"id":"74b6e5f0"},"outputs":[],"source":["def show_anns(anns):\n","    if len(anns) == 0:\n","        return\n","    sorted_anns = sorted(anns, key=(lambda x: x['area']), reverse=True)\n","    ax = plt.gca()\n","    ax.set_autoscale_on(False)\n","\n","    img = np.ones((sorted_anns[0]['segmentation'].shape[0], sorted_anns[0]['segmentation'].shape[1], 4))\n","    img[:,:,3] = 0\n","    for ann in sorted_anns:\n","        m = ann['segmentation']\n","        color_mask = np.concatenate([np.random.random(3), [0.35]])\n","        img[m] = color_mask\n","    ax.imshow(img)"],"id":"74b6e5f0"},{"cell_type":"markdown","metadata":{"id":"27c41445"},"source":["## Example image"],"id":"27c41445"},{"cell_type":"code","execution_count":null,"metadata":{"id":"ad354922"},"outputs":[],"source":["image = cv2.imread('/content/drive/MyDrive/Colab Notebooks/samples/12.png')\n","image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)"],"id":"ad354922"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":868,"output_embedded_package_id":"1ryIJ7SUG9q8Or4OuTXtyltuEZUFS2RDK"},"executionInfo":{"elapsed":30702,"status":"ok","timestamp":1685916607362,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"e0ac8c67","outputId":"4f8dd6ed-6fe5-45d1-ebaf-0f195adb470a"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["plt.figure(figsize=(20,20))\n","plt.imshow(image)\n","plt.axis('off')\n","plt.show()"],"id":"e0ac8c67"},{"cell_type":"markdown","metadata":{"id":"b8c2824a"},"source":["## Automatic mask generation"],"id":"b8c2824a"},{"cell_type":"markdown","metadata":{"id":"d9ef74c5"},"source":["To run automatic mask generation, provide a SAM model to the `SamAutomaticMaskGenerator` class. Set the path below to the SAM checkpoint. Running on CUDA and with the default model is recommended."],"id":"d9ef74c5"},{"cell_type":"code","execution_count":null,"metadata":{"id":"1848a108"},"outputs":[],"source":["import sys\n","sys.path.append(\"..\")\n","from segment_anything import sam_model_registry, SamAutomaticMaskGenerator, SamPredictor\n","\n","sam_checkpoint = \"sam_vit_h_4b8939.pth\"\n","model_type = \"vit_h\"\n","\n","device = \"cuda\"\n","\n","sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)\n","# sam.to(device=device)\n","\n","mask_generator = SamAutomaticMaskGenerator(sam)"],"id":"1848a108"},{"cell_type":"markdown","metadata":{"id":"d6b1ea21"},"source":["To generate masks, just run `generate` on an image."],"id":"d6b1ea21"},{"cell_type":"code","execution_count":null,"metadata":{"id":"391771c1"},"outputs":[],"source":["masks = mask_generator.generate(image)"],"id":"391771c1"},{"cell_type":"markdown","metadata":{"id":"e36a1a39"},"source":["Mask generation returns a list over masks, where each mask is a dictionary containing various data about the mask. These keys are:\n","* `segmentation` : the mask\n","* `area` : the area of the mask in pixels\n","* `bbox` : the boundary box of the mask in XYWH format\n","* `predicted_iou` : the model's own prediction for the quality of the mask\n","* `point_coords` : the sampled input point that generated this mask\n","* `stability_score` : an additional measure of mask quality\n","* `crop_box` : the crop of the image used to generate this mask in XYWH format"],"id":"e36a1a39"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":839,"status":"ok","timestamp":1685918377101,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"4fae8d66","outputId":"4b8990a9-b75b-4d72-9dfa-52b6dc7eacd2"},"outputs":[{"name":"stdout","output_type":"stream","text":["345\n","dict_keys(['segmentation', 'area', 'bbox', 'predicted_iou', 'point_coords', 'stability_score', 'crop_box'])\n"]}],"source":["print(len(masks))\n","print(masks[0].keys())"],"id":"4fae8d66"},{"cell_type":"code","source":["print(masks[0]['segmentation'].shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6GiKmAb4_ipp","executionInfo":{"status":"ok","timestamp":1685925567082,"user_tz":300,"elapsed":812,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"}},"outputId":"297e739b-2ac7-4dc8-8cdd-2ba3ebbab603"},"id":"6GiKmAb4_ipp","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2000, 2000)\n"]}]},{"cell_type":"markdown","metadata":{"id":"53009a1f"},"source":["Show all the masks overlayed on the image."],"id":"53009a1f"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"output_embedded_package_id":"1R02UnQWSVGv0zgm_0mhEx3rjM6VRCZ1i"},"id":"77ac29c5","outputId":"681da5d8-67b8-436a-9f9d-4649b9f63845","scrolled":false},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["plt.figure(figsize=(20,20))\n","plt.imshow(image)\n","show_anns(masks)\n","plt.axis('off')\n","plt.show() "],"id":"77ac29c5"},{"cell_type":"code","source":["def load_pickle_data(filepath):\n","    with open(filepath, 'rb') as f:\n","        data = pickle.load(f)\n","    return data"],"metadata":{"id":"zkoDRJ3Wuahg"},"id":"zkoDRJ3Wuahg","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["The training data is stored as a list of dictionary, where each dictionary corresponds to a mask. Remenber the fields of each mask is defined as follows:\n","* `segmentation` : the mask\n","* `area` : the area of the mask in pixels\n","\n","When loading the data for training, you need to assign the label to each mask according the folder that it is loaded from. For masks loaded from `'/content/drive/MyDrive/Colab Notebooks/ballast_masks_training'`, the corresponding label is 'ballast', whereas the label will be 'non_ballast' for masks loaded from `'/content/drive/MyDrive/Colab Notebooks/non_ballast_masks_training'`."],"metadata":{"id":"7TrJ1nWvEBxX"},"id":"7TrJ1nWvEBxX"},{"cell_type":"code","source":["import os\n","import pickle\n","import cv2\n","\n","# Define the path to the 'ballasts_img' folder in your Google Drive\n","image_folder_path = '/content/drive/MyDrive/Colab Notebooks/ballasts_img'\n","\n","# Define the path to the 'ballast_masks_training' folder in your Google Drive\n","mask_folder_path = '/content/drive/MyDrive/Colab Notebooks/ballast_masks_training'\n","\n","# Check if the 'ballast_masks_training' folder exists in Google Drive and create it if not\n","if not os.path.exists(mask_folder_path):\n","    os.makedirs(mask_folder_path)\n","\n","# List all files in the 'ballasts_img' directory\n","image_files = os.listdir(image_folder_path)\n","\n","# Process each image file\n","for image_file in image_files:\n","    # Load the image using OpenCV\n","    image = cv2.imread(os.path.join(image_folder_path, image_file))\n","    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","    # Generate masks\n","    masks = mask_generator.generate(image)\n","\n","    # Simplify masks\n","    simplified_masks = [{'segmentation': mask['segmentation'], 'area': mask['area']} for mask in masks]\n","\n","    # Save it using pickle, to the 'ballast_masks_training' folder in Google Drive\n","    with open(os.path.join(mask_folder_path, f'{image_file}_masks.pkl'), 'wb') as f:\n","        pickle.dump(simplified_masks, f)\n"],"metadata":{"id":"SvODUi8SuiSy"},"id":"SvODUi8SuiSy","execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import pickle\n","import cv2\n","\n","# Define the path to the 'non_ballast_img' folder in your Google Drive\n","image_folder_path = '/content/drive/MyDrive/Colab Notebooks/non_ballast_img'\n","\n","# Define the path to the 'non_ballast_masks_training' folder in your Google Drive\n","mask_folder_path = '/content/drive/MyDrive/Colab Notebooks/non_ballast_masks_training'\n","\n","# Check if the 'non_ballast_masks_training' folder exists in Google Drive and create it if not\n","if not os.path.exists(mask_folder_path):\n","    os.makedirs(mask_folder_path)\n","\n","# List all files in the 'non_ballast_img' directory\n","image_files = os.listdir(image_folder_path)\n","\n","# Process each image file\n","for image_file in image_files:\n","    # Load the image using OpenCV\n","    image = cv2.imread(os.path.join(image_folder_path, image_file))\n","    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","    # Generate masks\n","    masks = mask_generator.generate(image)\n","\n","    # Simplify masks\n","    simplified_masks = [{'segmentation': mask['segmentation'], 'area': mask['area']} for mask in masks]\n","\n","    # Save it using pickle, to the 'non_ballast_masks_training' folder in Google Drive\n","    with open(os.path.join(mask_folder_path, f'{image_file}_masks.pkl'), 'wb') as f:\n","        pickle.dump(simplified_masks, f)\n"],"metadata":{"id":"WV2uUBcyDSik"},"id":"WV2uUBcyDSik","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"00b3d6b2"},"source":["## Automatic mask generation options"],"id":"00b3d6b2"},{"cell_type":"markdown","metadata":{"id":"183de84e"},"source":["There are several tunable parameters in automatic mask generation that control how densely points are sampled and what the thresholds are for removing low quality or duplicate masks. Additionally, generation can be automatically run on crops of the image to get improved performance on smaller objects, and post-processing can remove stray pixels and holes. Here is an example configuration that samples more masks:"],"id":"183de84e"},{"cell_type":"code","execution_count":null,"metadata":{"id":"68364513"},"outputs":[],"source":["mask_generator_2 = SamAutomaticMaskGenerator(\n","    model=sam,\n","    points_per_side=32,\n","    pred_iou_thresh=0.86,\n","    stability_score_thresh=0.92,\n","    crop_n_layers=1,\n","    crop_n_points_downscale_factor=2,\n","    min_mask_region_area=100,  # Requires open-cv to run post-processing\n",")"],"id":"68364513"},{"cell_type":"code","execution_count":null,"metadata":{"id":"bebcdaf1"},"outputs":[],"source":["masks2 = mask_generator_2.generate(image)"],"id":"bebcdaf1"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":348,"status":"ok","timestamp":1685510453860,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"b8473f3c","outputId":"39aa2fd9-8093-4cbc-ff86-d101241deb38"},"outputs":[{"data":{"text/plain":["464"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["len(masks2)"],"id":"b8473f3c"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1slxjOn8xAShIHhem9SI0-Jr_OHhqiMZZ"},"executionInfo":{"elapsed":42280,"status":"ok","timestamp":1685510500699,"user":{"displayName":"Haoran Yuan","userId":"15740772057815789341"},"user_tz":300},"id":"fb702ae3","outputId":"e8577a6f-7a59-45b3-94e7-478119cafbba"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["plt.figure(figsize=(20,20))\n","plt.imshow(image)\n","show_anns(masks2)\n","plt.axis('off')\n","plt.show() "],"id":"fb702ae3"},{"cell_type":"code","execution_count":null,"metadata":{"id":"8c937160"},"outputs":[],"source":[],"id":"8c937160"}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[{"file_id":"https://github.com/facebookresearch/segment-anything/blob/main/notebooks/automatic_mask_generator_example.ipynb","timestamp":1685508926020}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.0"}},"nbformat":4,"nbformat_minor":5}